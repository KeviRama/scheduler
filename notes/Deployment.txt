Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-05-03T08:53:53+01:00

====== Deployment ======
Created Saturday 03 May 2014

How to deploy a Rails 4.1 app using Nginx and Passenger on Debian.  Doubtless there are other ways of doing it, involving other packaging strategies (straight from Phusion, Debian mainstream packages, etc.), but this is the way I do it.  I am going to install the Passenger gem under Rvm, then use that to build a suitable copy of Nginx.  The basic method came from:

http://www.rosehosting.com/blog/how-to-install-ruby-on-rails-with-nginx-and-passenger/

Firstly ensure neither nginx nor passenger has been installed by any other method, then make sure you are using the copy of Rvm and Gem which the target application uses.  For me this means doing:

'''
rvm use 2.1.1@scheduler
'''


Then install the Passenger gem.  It will be installed in the same Gem repository as my app uses, but will not be referenced by the app's Gemfile.

'''
gem install passenger
'''


Next we build and install nginx.

'''
apt-get install libcurl4-openssl-dev
rvmsudo passenger-install-nginx-module
'''


The latter command will produce various prompts.  For now I took the basic option to compile nginx with just Passenger added.  I may want to go back later and add support for pre-compressed assets.  This means adding ''--with-http_gzip_static_module'' to the nginx compilation.  Details of this can be found at:

http://edgeguides.rubyonrails.org/asset_pipeline.html

The compiled nginx will be placed in the default location of [[/opt/nginx.]]  You then need an init.d file, which I have copied into my source repository [[~/Work/Coding/scheduler/scratch/nginx|here]].  You then start up nginx (and configure it to start on boot) with:

'''
chmod a+x /etc/init.d/nginx
service nginx start
update-rc.d nginx defaults
'''


That completes the installation of those.  If you examine the nginx configuration file you will find it has automatically been set up to reference the copy of Rvm which we used to install things.  We just need to add a clause to tell it about our application.

    ''server {''
''    listen 80;''
''    server_name scheduler.sinodun.org.uk;''
''    root /home/john/Work/Coding/scheduler/public;''
''    passenger_enabled on;''
''}''

You also need to set up a secure key for the production environment of your application.  One is generated randomly for each of the development and test environments (and placed in ''config/secrets.yml'') but it expects you to make one of your own for the production environment.  The command ''rake secret'' can be used to create secret keys.  It is recommended that you put the production environment's one in your user's environment files, rather than in the secrets file.

And re-start nginx.  At this point things started to work a bit, but although I could get the basic html, neither css nor js files seemed to be coming through.  I was also rather puzzled by that reference to a public directory in my application since it didn't have one.  Older versions of Rails used one, but it seems to have disappeared by 4.1.  After a bit of research I discovered that this was because in Rails 4.1 it is assumed your JavaScript and CSS files will have been pre-processed to put all the separate bits of each in one large file for each.  You achieve this by typing (in your application's directory):

'''
RAILS_ENV=production bundle exec rake assets:precompile
'''

which should be done on your production system as part of the deployment.  It needs re-executing each time you deploy a new version to your production server.  This task creates the public directory, and populates it with the concatenated versions.  I now find my application would work fine under Nginx, but oddly not if I did an old fashioned:

'''
RAILS_ENV=production rails server
'''


Then the assets were still missing.  After a bit more research I found that if you want that to work you need to edit ''config/environments/production.rb'' and change ''config.serve_static_assets'' to ''true''.  You probably don't want to do this in a real production environment.

===== New software version =====

To deploy a new software version, go onto the server and do:

'''
git pull <whatever>
RAILS_ENV=production rake db:migrate
RAILS_ENV=production bundle exec rake assets:precompile
'''

and then probably restart nginx.
