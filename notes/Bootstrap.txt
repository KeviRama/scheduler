Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-04-20T10:26:59+01:00

====== Bootstrap ======
Created Sunday 20 April 2014

This page originaly documented how to get started with creating the project (see Creation section below), but now I'm updating it to say how to set up a brand new machine as a development or deployment system.  Some of the information from the Creating section is repeated here.  We will initially set up the machine to be able to run Scheduler in a development environment, then go on to setting it up for production use.

==== Development mode ====

We start by assuming you have installed Debian Jessie (currently 8.1) on a clean machine.  You will need a user account under which you will be running the application, plus access to root to install packages.  Then perform the following steps in order.

As root, install sudo and add your user to the list of those permitted to use it.  At the same time you might as well install a few other things, which will be needed later.

'''
# apt-get install sudo vim curl zim git libicu-dev
# adduser <user-name> sudo
# adduser <user-name> staff
# update-alternatives --config editor
'''


In the last one, choose vim as the default editor for the system (or something else if you prefer).

Log out and then back in as your chosen user in order to pick up the new privilege.

Next we need to get the Ruby Version Manager installed.  This will provide the means to install whatever versions of Ruby we want.  Visit https://rvm.io/ for details of how to install it.  Currently this comes down to two commands.

'''
$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
$ \curl -sSL https://get.rvm.io | bash -s stable
'''


Note that you install RVM as your designated user - not as root.

Once the installation is complete, log out and in again to pick up your modified environment.  Now you can install Ruby.  The application currently uses version 2.1.1, which is slightly out of date but not much.  It would probably work fine with the latest one, but for now we want a fully predictable environment.

'''
$ rvm install ruby-2.1.1
$ rvm use 2.1.1
$ rvm gemset create scheduler
$ rvm gemset use scheduler
$ gem install rails --version 4.1
'''


The first command will take a little time because it will download the source and then compile the required version.  You may well need to enter your password to allow it to install some more system packages.  Once these are complete you have your basic environment and we can think about installing the application.

Currently the application uses mysql as its database server, so install mysql.

''$ sudo apt-get install mysql-server mysql-client libmysqlclient-dev''

In the course of the installation you will need to provide a superuser password for mysql.  This should be different from both your ordinary user's password, and from the system root password.  Keep a record of it - you will need it later.

Now you need to create your actual databases within mysql.  It is usual to create three - development, test and production - even though you will usually use only one or two of them on any given machine.

'''
$ mysql -u root -p
<enter password>
create database scheduler_development;
create database scheduler_production;
create database scheduler_test;

grant all on scheduler_development.* to 'scheduler'@'localhost' identified by 'scpasswd';
grant all on scheduler_production.* to 'scheduler'@'localhost' identified by 'scpasswd';
grant all on scheduler_test.* to 'scheduler'@'localhost' identified by 'scpasswd';
flush privileges;

exit
'''

Note that the password used here is the default one for the application.  You will probably want to change it to something of your choosing, and change it in the application's configuration too.

Since the application is a Rails application, it needs a JavaScript interpreter on the host.  We use node.js for that.  As your selected user, create a new directory to build node, and download the source from https://nodejs.org/download/.  Unpack and build it with:

'''
$ zcat node-v0.12.7.tar.gz | tar xf -
$ cd node-v0.12.7
$ ./configure
$ make
$ make install
'''


Note that this step is relying on the compiler tools which were installed as part of the installation of Ruby earlier.  If you do these two in the opposite order, you will need to install the tools first.  Command:

$ ''apt-get install build_essential''.

That's all the infrastructure in place, and we're ready to start think about getting the application itself.

First you need an ssh key to identify yourself.  As your normal user, type:

''$ ssh-keygen''

You may well want to protect the key with a pass-phrase when prompted to do so.  Once you have generated the key, you need to give a copy of ''.ssh/id_rsa.pub'' to JHW to gain access to the repository.  You also need to edit ''/etc/ssh/ssh_config'' as root to add the following two lines at the end.

'''
Host git.sinodun.org.uk
  Port 1011
'''


Once JHW has set you up, move to the directory where you want to install the Scheduler software (I use ~/Work/Coding) and type:

''$ git clone gitosis@git.sinodun.org.uk:scheduler.git''

then change directory into the newly created ''scheduler'' directory and type:

''$ bundle install''

to pull in all the necessary ancillary packages.

Next you need a copy of the data from the live system.  You can get this by copying ''scheduler_production.dmp.gz'' from 172.16.1.4 in directory ''/Volumes/StaffHomes DBs & Web/Calendar''.

I create a directory:

''Work/Coding/scheduler/import''

and place the file there.  I then create a script called ''loaddb'' containing:

'''
#!/bin/bash
zcat scheduler_production.dmp.gz | mysql -u root -p scheduler_development
'''

Execute this script and you should have populated your database.  You will need to provide your MySQL admin password to effect the load.  The application is now ready to run (at least in development mode), but you need to put some credentials in place to make logging on through Google work.  Edit your .profile in your home directory and add these lines to the end of it.

'''
#
#  Environment stuff.
#
GOOGLE_CLIENT_ID="502029956478-2g9nba4nv12i6o8vsbm9idsqpfoo61bk.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET="6r61bAS_nRJ_rmgm6OuAR-7R"
export GOOGLE_CLIENT_ID GOOGLE_CLIENT_SECRET
'''


Again, log out and then in again to make the changes take effect.  Start up the application by changing to the directory where you installed it and typing "rails s".

'''
$ cd ~/Work/Coding/scheduler
$ rails s
'''


Then use a web browser to access http://localhost:3000/ and you should see the familiar application.  The basic installation is now complete and you have it running in development mode.

==== Production mode ====

The application is running, but currently it's attached to a terminal and providing a lot of debug information.  For production use, we want it to run in the background - probably with multiple copies, we want caching of static data, and we don't want all the detailed logging.  For this we run it behind a dedicated web server (nginx) and we use some clever software (Passenger) to glue the two together.

Note that any given server should be used either for development or for production - not both.  Make sure you shut down the development copy (Ctrl-C in the terminal) before trying to run a production server.

You can do the following in your home directory, but you need to make sure you are using the same gem as is used in the application, so start with:

''$ rvm use 2.1.1@scheduler''

then install passenger with:

''$ gem install passenger''

and compile and install nginx with:

'''
$ sudo apt-get install libcurl4-openssl-dev
$ rvmsudo passenger-install-nginx-module
'''

This starts a formidable looking installation process, but just let everything default - press enter.  The only time you have to make a choice is whether to have a basic installation (1) or customize things (2).  Choose 1.

To get nginx (the web server) to start automatically you need an init script.  You'll find one in the source tree at:

''Work/Coding/scheduler/scratch/nginx''

Copy that to ''/etc/init.d'' and set it going with:

'''
$ sudo cp Work/Coding/scheduler/scratch/nginx /etc/init.d
$ sudo chmod a+x /etc/init.d/nginx
$ sudo /etc/init.d/nginx start
$ sudo update-rc.d nginx defaults
'''


The final line sets things up so that nginx will restart when the system is booted.

Now nginx needs to be told about our application.  Edit the file ''/opt/nginx/conf/nginx.conf'' and add the following lines to the end:

'''
server {
    listen 80;
    server_name <fully qualified domain name of your server>;
    root /home/<username>/Work/Coding/scheduler/public;
    passenger_enabled on;
}
'''

Note the need to fill in two items here - the fully qualified domain name of your server, and the name of the directory where the application is installed.

One thing may strike you as odd here - the directory referred to above doesn't yet exist.  This is where one of the differences between the development and production environments starts to become apparent.

When you're running the application in development mode, all the necessary JavaScript and CSS files are downloaded separately to your browser.  That way if you change one, the change can be reflected immediately.  Some of the JavaScript files are actually written in CoffeeScript, which is compiled on the fly as it's sent to the browser.

In the production environment, these items are assumed to be static, and you want them transferred to the browser only once, as efficiently as possible.  For this reason, all the files are pre-prepared and packed into one large JavaScript file and one large CSS file.  These are then served directly by nginx, removing the need for the application to be involved at all.  Happily the process is fully automated.  To prepare these files (and incidentally, create your public directory) go into the application directory and type:

''$ RAILS_ENV=production bundle exec rake assets:precompile''

This will produce quite a bit of output, and then you'll find that the public directory is there and populated.

The production copy uses its own separate database which needs populating too.  Edit your ''loaddb'' script created earlier to load to scheduler_production instead of scheduler_development and run it again.

If you now re-start nginx with:

''$ sudo /etc/init.d/nginx restart''

You should be able to access the application.  You won't however be able to log in, because that means setting up some more Google credentials, and should probably be done by the school.

===== !!!!Stop here!!!! =====

After here is old stuff.

==== Creation ====

Just getting started with a new project is quite interesting, because you need to do quite a bit before you can start to structure and document what you're doing.

This is a Rails project, which means Ruby and Gem are needed, and it makes sense to use a good tool to control versions.  Clearly source code control will use git, but we also need something to manage Ruby versions.  The Rails project now recommends rbenv as a more lightweight manager, but I'm used to rvm and you seem to have to add lots of bits to rbenv to get the same necessary functionality.  rvm used to have a few nasty side effects, but they do seem to have tidied those up a bit.  It also seems to be the one generally used, despite RoR's recommendation.

So, the first step is to install the latest rvm - just follow the instructions on the web site.  If you already have a version of rvm you can do "rvm get stable".

Next you need to install ruby - I'm using the latest version so it's 2.1.1.

'''
rvm install ruby-2.1.1
rvm use 2.1.1
rvm gemset create scheduler
'''


Note that the rvm "best practices" section recommends creating a gemset per project, rather than one per version of Rails.

'''
rvm gemset use scheduler
gem install rails --version 4.1
'''


and after a while you should have an installation of Rails ready to use.  Now you can create your project directory.  Navigate to the parent directory where you intend to create it, then use Rails to create the project directory.  I use ''~/Work/Coding'' for my coding work.

'''
cd ~/Work/Coding
rails new scheduler
'''


and again there will be a short delay whilst things are set up for you, after which you'll have a new directory called scheduler.  Then I create a directory called "notes" within that, and point Zim at that as its working directory.  Now I'm in a position to start documenting things as I work.
