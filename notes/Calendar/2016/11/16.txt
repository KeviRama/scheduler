Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-11-16T10:18:49+00:00

====== Wednesday 16 Nov 2016 ======

Well, I thought I had my plan for today sorted.  I was going to put my user search aside - their is something silly wrong with my CoffeeScript, but I need to do some revision to fix it - and then do two things.  Implement sub-editing, and then start producing some documentation.

Niki has hit me first thing though with what looks like an amusing little bug, so I'll investigate that first.  Plan.

[*] Investigate Niki's bug and fix.
[*] Implement sub-editing
[ ] Produce some documentation

The first thing I will need to do is switch back to the live version of the code, and get a copy of the live database.

Then check whether I can re-produce the problem.  It is apparently with a new group which was created yesterday and imported this morning.  It's called "AEF RAF Benson" and it belongs to Rebecca Cottam.  It seems to be flagged as public, and she can see it just fine in her predictive text, but Niki and I can't.  Nor can other users in general.  She has permission to have public groups.

Of the bits in the search, it's the mine_or_system bit which is failing.  And that's because the element has a user_id.  This isn't normally the case for a public group, so why is this one different?

It's noticeable that this one has started life being public, whilst most of the existing ones have become public after a change to their owner's permission.  My logic seems a little odd in this area.

It appears that if a group has make_public set to true, then it should pretend not to have an owner.  Odd though that we have both a disowned filter and a mine_or_system filter.  Read carefully.

elements have the following

'''
t.boolean current
t.integer owner_id
t.boolean owned
'''


It sounds like I've got a little disorganised in this area.  The simple fix to Niki's immediate problem would seem to be to set the owner_id of the affected group's element to nil.  Done that, and it seems to work.

Now need to sort out my logic.  I think I've tried to store the same information in two different places, or is their a subtle difference between them?  I seem to have added the owned flag in Oct 2015, whilst the owner_id field was added in Aug 2014.  Possibly I should tidy up the logic in this area.

Actually - I should establish first why the inconsistency arose.  It's fine for an updated group - why is it wrong for a new group.

The Elemental concern creates an after_save method on each entity which makes sure that the element.owner_id is the same as entity.entitys_owner_id, and then the method in the group model is meant to return nil if the group has make_public set.  It's kind of lying, and definitely storing the same information in two places.  Why did it not end up as nil from last night's data load?  It would seem that perhaps the make_public flag was not set at the time, and yet it's definitely set to true now.

I'm not sure I can tell how this has happened.  It's a little worrying.  Try deleting that group on my development system, and then run the import again with logging on.

Also, where is the owned flag managed in Elements?  Does it work for all element types?

Ah, no - owned does not mean what I thought it meant.  Owned is a flag indicating whether the element has a controller.  It has nothing to do with who created the element.  Documentation needs improving.  Done that.

OK - so it's only the owner_id which I need to worry about.  Why is it not getting set correctly when my record is created?  Add some more temporary logging and run the same job again.

'''
Setting source_id_str to 288.
Setting datasource_id to 2.
Setting name to AEF RAF Benson (Trips).
Setting era to #<Era:0x0000000624c538>.
Setting starts_on to 2016-11-16.
Setting ends_on to .
Setting current to true.
Setting owner_id to 152.
Setting make_public to true.
'''


So, the group is created with an owner_id of 152, and make_public set to true.  Then the record is saved to the database.  Why does the logic not then work the way which I expect?

Found it - a very silly error in my code.  I am correctly calling entitys_owner_id when updating the element, but calling just owner_id when creating the element.  I will however need some extra code to correct the ones which have been incorrectly created.  Actually, it's slightly complex.  Which entities provide an owner_id?

* Groups

That's all.  Various other things have an owner_id:

* Elements
* Events
* Freefinders
* Notes

but none of those is an entity.  The change is therefore simple.  How many elements are in this inconsistent state.  They will need to be groups, indeed, tag groups, and they will have make_public set, but the element's owner_id not correctly set.

I seem to have 7 faulty ones, apart from my original one.

'''
2.1.10 :001 > Taggroup.fix_not_public
  Group Load (0.1ms)  SELECT `groups`.*
					  FROM `groups` INNER JOIN `elements`
									ON `elements`.`entity_id` = `groups`.`id`
									AND `elements`.`entity_type` = 'Group'
					  WHERE `groups`.`persona_type` = 'Taggrouppersona'
						AND `groups`.`make_public` = 1
						AND (elements.owner_id IS NOT NULL)
  Taggrouppersona Load (0.0ms)  SELECT  `taggrouppersonae`.* FROM `taggrouppersonae`  WHERE `taggrouppersonae`.`id` = 1420 LIMIT 1
RMF St Albans XC (Sport) at 2016-11-16 10:27:19 +0000
RMF St Albans XC (Sport) at 2016-11-16 10:27:19 +0000
SCVM Tutor Group Theatre Trip 18/12/16 (Trips) at 2016-11-04 04:09:50 +0000
Outreach Science Ambasadors (Trips) at 2016-11-14 02:39:34 +0000
CCF RAF Section Michaelmas 2016 (Activity) at 2016-10-14 04:07:33 +0100
CCF Army Section Michaelmas 2016 (Activity) at 2016-10-14 04:07:33 +0100
CCF Recruits Michaelmas 2016 (Activity) at 2016-10-14 04:07:34 +0100
 => nil
'''
 

Now here's weird.  I reloaded the database for a final test and this time I got only 5 groups.

'''
Fixed 5 groups.
SCVM Tutor Group Theatre Trip 18/12/16 (Trips)
Outreach Science Ambasadors (Trips)
CCF RAF Section Michaelmas 2016 (Activity)
CCF Army Section Michaelmas 2016 (Activity)
CCF Recruits Michaelmas 2016 (Activity
'''


Not those two RMF ones, and not Rebecca's one.  How?  Ah - I know.  These 5 are the ones which were loaded before today.  The remaining 3 were loaded in the small hours of this morning, and so by re-loading the database I've prevented them being loaded badly in the first place.  Excellent.  Let's package that up as a hot fix.  Done v0.10.4

Now, back to my original program.

Now, for the sub-editing I have a couple of choices about how to work it.  I already have a User#can_edit? method and it makes sense to add a User#can_subedit? to match, but there are two ways I could have it.

Anyone who passes the can_edit? test, could automatically pass the can_subedit? test, and so each field would need only one test on it.  The group who can_edit? would be a sub-set of the group who can_subedit?

Or, we could have them as two disparate groups - editors and sub-editors - and have two checks on some fields.

I think I prefer the former, nested groups approach.  Anyone who can_edit? will always pass the can_subedit? test and so we can have just the one test at each point in the controller.

Implemented, and on the staging server.  Next we look at documentation, and I'd like to generate some automatically using the same mechanism as the Linux kernel.  I want to put it straight onto my web site, which is currently empty.

