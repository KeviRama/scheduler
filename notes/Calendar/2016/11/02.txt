Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-11-02T10:54:35+00:00

====== Wednesday 02 Nov 2016 ======

I've been wondering about what to do next, and have kind of settled on repeating events.  These can already be done through a YAML file (which should give some clues about what can be used).

Some thoughts from today's work.

I anticipate using a new database table called "repeaters", with each set of repeating events being tied together by one repeater event.  Deleting an event will delete its repeater (if any).  Deleting a repeater should be done from the context of an event, and will delete all the associated events except the invoking event.  It will thus be possible to take repeating-ness off an event again.  A warning should be given if the user does this.

Since users will often want to do things for a term, it might make sense to add either sub-eras (terms) or key dates to each era, and then offer them for fast entry in the dialogue.  We wouldn't be able to have too many, but one could have some.  Start and end of terms and half terms.  Arguably, one only really needs end dates because one naturally puts the initial event at the start date.  If one went for key dates in the era, these could be split into starting and ending dates and then only the appropriate ones offered.

For a first implementation, I will have all the events create synchronously when the user clicks "Done".  We'll see how long it takes and make it asynchronous if there are problems.

Currently we have no locking to prevent two users editing the same event at the same time.  It works on a last-to-save-wins basis.  It's unusual for it to happen because on the whole users can edit only their own events.  It's possible that an admin could get in there though, or someone with a controlling interest over a resource.  We could perhaps add a check when saving an event to see that it hasn't been modified since it was loaded.  If it has been modified, then the the user gets a warning pop-up, the event is re-loaded and he's thrown back into the editing dialogue.  This would apply to all events, not just repeating ones.

Then for repeating ones, we need to make sure there aren't two sets of changes propagating at the same time.  When an event says to a repeater, "OK - propagate this", it should record (to the database) that propagation is occurring and which event initiated it - i.e. which event is the source event for duplication.  When it has finished it should remove this information.  If it gets a request to propagate whilst this information is already set it should refuse, and processing would be as for a double edit above.

I can't see it happening very often, but we do need to think about it.

If someone clones an event, they get just that event, they can then edit it and make it repeat if they want it to.

How to store the repetition criteria in the repeater record?  Days of the week could be just 7 flags, but the week A/B/any needs to be customizable.  ActiveRecord serialize might be worth investigating.

