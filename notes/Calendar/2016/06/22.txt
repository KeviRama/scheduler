Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-06-22T13:50:21+01:00

====== Wednesday 22 Jun 2016 ======

Working at getting tutorgroups loaded into Scheduler from iSAMS, generalising the code so that it will also work for teaching and tag groups.

I've had a thought about dynamic programming.  There are two ways of accessing an instance variable where the name is computed at run time.  Provided it has accessor methods you can use:

'''
self.send("fred")
self.send("fred=", value)
'''


or you can use:

'''
self.instance_variable_get("@fred")
self.instance_variable_set("@fred", value)
'''


Obviously, the second option overrides the object encapsulation, so up until now I've inclined to the first but I'm changing my mind.  To use the first, the object has to publish methods for the variable, and that may not be what one wants to do.  Given that I am doing it all to "self", I should really use the second one.  It's perfectly legitimate for an object to use those on itself, and thus you don't need to publish things which you might not otherwise want to publish.

Of course, if I do that then I need to make sure I have set up actual instance variables and not dummy methods.  There's no error if you try to get a variable which doesn't exist - you just end up with nil.

Perhaps I won't change the existing code just at present.

There's something really weird going on - in my iSAMS export, JAC5a and JAC4a seem to have swapped over tutors.  The real state of affairs (AFAIK) is that AGMS has JAC4a and EMH has JAC5a (my old group).  My dump from iSAMS has them the other way around.  Check the spreadsheet which I sent to iSAMS, especially Barnaby Bussell.  Yes, they were the right way around there.  Has someone done some end of year processing?

Check the slightly older data file which I took a few days earlier.  Ah - no use.  The whole reason I took the second export was to get the tutor information.  Could try a fresh export from iSAMS?  Data file is now much smaller, which suggests the data load hasn't finished.  The pupil records aren't there, but the tutor group record is and it still has Alex Stuart.  This may be a hangover from the earlier version.

I could just carry on with my code.  It doesn't matter if I create a whole new load of groups, provided that my code now works.  Indeed, it's a useful opportunity to test that branch of the code.

There's nowhere else I might have specified the tutors separately is there?  Ah yes, there is.  Who was in charge of JAC 5a there?  Damn - it was AGMS.  The errors is in the data which I transferred from SB then.  How did I get it wrong?  File is school_structure_forms

Looked at the files coming from SB, and the information simply seems to be wrong there.  How am I getting it right in Scheduler though?  Need to check that for completeness.  Ah - I'm not using the class table.  How then am I doing it?  I am getting it from a table called tutorgroup, where the information is correct.  Pity I didn't use the same thing for the iSAMS export.  Probably too late to change it now.

Interesting.  Each pupil record connecting him to a tutor group includes the tutor's ID.  These are all correct.  The tutor group record itself though has it wrong.  I've used the linking records to do each pupil, but then the tutor group record for the tutor group's own entry.

Just noticed another mistake too.  I've gone with iSAMS's example in the pupil records and put the tutor's initials there.  It should actually be the tutor's ID in that field.

Now - can I progress.  Arguably, I could try to identify tutor groups by a completely different means.  Or I could start a new year and create them all from scratch.  Currently tutor groups have no source ID, but I could give them one.  They'd need a datasource_id too.  Does iSAMS provide something which I could use?  No - nothing numeric.  It actually uses the tutor group's name as its ID, which is bad design and explains why they can't be renamed.

Hmm.  The correct solution, if iSAMS's database design weren't broken, would be to set up a source_id and use that.  I could still do that, but I'd have to make it a text field and not a numeric field.  Not the end of the world.

Perhaps I should give it a source_id (integer), source_name (string) and datasource_id (internal)?  That would cover just about all possible cases?  It would be up to each platform-specific loader to decide which to use.  Perhaps these should go on the group record too?  Then they could be used for any kind of group.  Want a better name than source_name though.

Also, teachinggroup and taggroup already have a source_id.  Can I move that?  I believe so - currently the group handles the request via a method_missing implementation.  I can simply put it in the group proper, and it will no longer be missing.  My land_grab method can update existing records.  I will need to modify the pseudo-models to make them do less.

Or, should I keep my groups clean and say that anything like a source_id really belongs in the persona?  Groups are to do with grouping things, and any extra functionality really doesn't belong in there.  Mind you, they already have an era_id and an owner_id.  I don't think they're that pure.
