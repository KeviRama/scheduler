Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-08-16T07:55:22+01:00

====== Tuesday 16 Aug 2016 ======

My overnight job - daily_report - failed on mach2 because it tried to use the wrong version of ruby, invoked via a wrapper.  I also note that if I invoke my importisdata script from my home directory as:

''Work/Coding/scheduler/utils/importisdata''

then that too seems to pick up the wrong version of Ruby.  There is code in the daily_report script to pick up the right one - I think I need to make use of that in the importisdata script too.

The command to set up the right alias (wrapper) on a system is:

''rvm alias create scheduler ruby-2.1.10@scheduler''

and then you can invoke the right ruby with:

''~/.rvm/wrappers/scheduler/ruby''

Seems a little long-winded.  Can also set:

''rvm --default use 2.1.10''

to make sure one at least has the right ruby by default.  What about ensuring the right gemset?  That is presumably achieved by the above wrapper, but one can also do:

''rvm use 2.1.10@scheduler --default''

Downloaded a fresh xml file via the scheduler API, but nothing seems to have changed.  Not therefore worth propagating it to the staging and live servers.  It is however worth me making sure the whole thing will run from a cron job on the staging server.

Things to do today.

[*] Copy documentation from FireFly
[*] Remove duty slots on mach2
[*] Note to MKTH
[*] Go through ensuring all systems are using 2.1.10@scheduler
[*] Set RAILS_ENV for cron job
[*] Test cron job on staging server
[ ] Fix subject names in auto-generated groups.  Use the report name rather than the one with (S).
[*] Nick reports Drama Studio and Ingham Room have been duplicated.  Fix.  It seems that 41 new locations were created.  I should probably check them.
[ ] Upgrade vps to latest code and data (best done tomorrow).
[ ] What happens if I run the importer against an empty input file?
[ ] Could I implement checks whereby certain fields must exist in the .xml file, and certain records must have a minimum number.  Do I ever actually delete (as opposed to mark as no longer current) anything?

And then perhaps I can think about exporting data to Markbook.  Another large bit of work which I haven't even started yet.

Useful guidance here - https://rvm.io/deployment/cron

As the xml file hasn't changed, I've just put the duty slots stuff onto the staging server and am re-running the import.  Hang on - no I'm not.  I've forgotten to pull the new source.  Let it run and see what happens.  I suspect it might well crash.  No, it didn't - it just created a pile of stupid entries.  It did at least delete the 1494 ones created previously.

Interesting - when I ran again with the right code the erroneously created duty events didn't get deleted.  Why not?

Run the old code on my development server to create the same erroneous events, then add some logging to see why they aren't removed again.

Right, I have 166 events in the duties category with a body of "Ignore".  These are the only events with that in the body.  The reason I'm not finding them seems to be that they are instantaneous events, happening at midnight.  Presumably my selection code doesn't cover that.

Looking for events on 2017-03-09, my call results in the following SQL.

'''
2.1.10 :004 > dc.events_on(date, date, es)
  Event Load (0.1ms)  SELECT `events`.* FROM `events`  WHERE (
	starts_at < '2017-03-10 00:00:00' and
	ends_at > '2017-03-09 00:00:00' and
	eventcategory_id = 3 and 
	eventsource_id = 4 and
	not non_existent)
 => #<ActiveRecord::Relation []> 
2.1.10 :005 >
'''
 

Yes, I can see the problem there.  Should one of the conditions be an "or equals" one?  If so, which one?  Or should I just accept that this type of event simply shouldn't exist?  One to think about for a few minutes.

Just created an all day event for today, and checked what appears in the d/b.  It starts at 23:00 GMT yesterday, and ends at 23:00 GMT today.  Each of these is midnight BST, which is what we're on at the moment.

If I were to make either of my selection conditions above an "or equals" one, then either it would appear to protrude, either into the day after, or the day before.  The duration of an event is a closed-open range.  It starts at (and includes) 00:00 on the relevant day, and it ends at (but doesn't include) 00:00 on the next day.

If I were to change the starts_at condition above to be <=, then it would catch all-day events on the following day.  If I were to change the ends_at condition to >= then it would catch all-day events from the previous day.  The test is absolutely correct.

What I should perhaps have is code in the event model preventing the creation of events with a zero duration.  But how do I represent an event which is just a time?  Exactly like that.  Can't prevent them then.  I could perhaps prevent them being exactly at midnight?  It's very much an edge case though.  It's only an issue when I have an event with zero duration, exactly at midnight, and I'm trying to find it with a search for just one day's events.  It slots in the zero-sized gap between the two days.

I think that for now, I change nothing.  Just don't do it again.  I should be able to go on and remove the duty slots on mach2 now.  Just remember to use the new code.

Just realised that the importisdata script doesn't include a setting of RAILS_ENV.  It thus won't work from a cron job.  Probably shouldn't be set from within the script though.  Needs to be set as part of the environment.  What would be best?  After some thought, I'm going to create ''~/etc/whichsystem'' and include that.  That way any script can use it, and only one file needs editing to switch systems.  I'm concerned about putting it in ''~/.profile'', because that gets included by Passenger and setting the variable might cause confusion.

Trying to run things on the staging server as a cron job and it defaults to using the wrong ruby.  This despite Ruby 2.1.10 now being the default.  How did I work it for the SB script?  Of course, that was expecting 2.1.1.

Getting there slowly.  Added ''~/etc/whichsystem'' which needs to be included by any script run from cron.
