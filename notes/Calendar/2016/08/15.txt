Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-08-15T08:00:42+01:00

====== Monday 15 Aug 2016 ======

Today I am going to take a fresh copy of the live data onto my test system and convert it fully, documenting as I go.  The main objective is to have a full set of instructions for the process (including end-of-year) in order then to be able to do the same thing on my staging server.

By the end of today, I would like my staging server to be in a position to update itself automatically over night - at least as far as the API is concerned.  It won't be able to get the activities data direct from the d/b until the d/b access is fixed.  Just tested the d/b access again and it still isn't working - I can only assume that iSAMS have removed my IP address from their whitelist, and that will need Niki to get it fixed.  Ignore for now.

Should I start by merging my code into the master branch?  The only reason to have it separate was in case I needed to do an urgent change on the live system during development, and I think that time is now past.  Let's go for it.

In terms of disaster recovery, I could potentially restore the original backup and revert to the original version of software, but I suspect I would be better off going back to the end of either phase 1 or phase 2.  Let's just hope I don't have to take this option.

Steps:

[*] Note the exact version of software currently in use.
[*] Shut down the web server.
[*] Back up live data (or get fresh copy of live data and load).
[*] Get latest code version.
[*] Move out of scheduler directory and back.
[*] bundle install
[*] On live(ish) system, export RAILS_ENV=production
[*] If re-running, go into the d/b console and drop the datasources table.
[*] rake db:migrate
[*] rake assets:precompile
[*] Start up the application and create datasources and current and previous MIS.
[*] Stop the application again.
[*] In the rails console, run Datasource.land_grab and Group.trim_memberships

End of phase 1.  The system now has the latest software, and has been tidied up a bit, but is still in the previous academic year.  Let's make the last era end on 14th August, and the new one start on the 15th - i.e. today.

[*] Run up the application and edit the era dates.  The next era seems already to be there.
[*] Stop application
[*] In the console, type Setting.first.end_of_era.  This takes a while.
[*] Run up the app again, and set the next_era field in the settings.
[*] Stop application

End of phase 2.  Dump the database again.  It should now be possible to run the utility without specifying either an era or a start date, but I do need to run it once with the --convert option.  First we need an up to date version of the xml file, but only the xml file because I can't get at the d/b at the moment.  Run the API fetching script separately for now, and drop it into the PreFetched directory.  It is in fact identical to the one which I got yesterday, suggesting that they do do caching as I suspected earlier.

Note that the data directories are not stored under git, and so need to be created manually.

[*] Create ''~/Work/Coding/scheduler/import/isams/PreFetched'' etc.
[*] Create ''~/Work/Coding/scheduler/import/schoolbase'' and move the .csv files there.
[*] Likewise create ''~/etc/isauth'' with the necessary authentication stuff.
[*] Copy in any pre-existing files which are to be used - especially the d/b dumps.
[*] Edit the importisdata script to add --convert to the invocation of misimport.rb.
[*] Run it!  This phase took an hour on my laptop, so probably similar on mach2.  174m45s!
[*] Take a look at the result in the system.
[*] Edit importisdata again to remove --convert
[*] Run again.  Seems fine - just changed the suspension state of three groups.  11m8s
[*] Run a third time.  Seems to have stabilised. 11m2s

End of phase 3.

[*] Re-start the web server process.

Excellent day's progress I think.

Time to do this on my staging server I think.  There will be some fun and games getting the right yml files in place I think.  The initial conversion run on my staging server took 59m39s.  About as expected.  Second run took 5m 58s and simply adjusted some of the suspensions.  Final run took 5m55s and did nothing.  Good.

The live system is currently at this position:

'''
commit b990abb5ece35160be620698c86565402d724f77
Author: John Winters <john@sinodun.org.uk>
Date:   Sat May 14 09:26:18 2016 +0100

	Add seek_permission flag
	
	We have the odd permission that people still submit paper
	requests to DJD for entry.  He's now asked Karen to enter
	them into Scheduler so that he can do the approvals process
	on-line.  Karen thus needs to be able to enter calendar
	events without automatically giving them permission.
	
	Added an extra flag - seek_permission - so that she can do this.
'''


That's where I need to go back to if I want to revert everything entirely.

Must remember to get modified yml files onto the live server before attempting a data load.
Check pupils get their right tutor group name.  Yes, they do.

Damn!  Phusion for some reason is trying to run the app using Ruby 2.1.1.  Why?  This didn't happen on the staging server.  Has it shut down properly?  Try a re-boot.

Ah - the problem seems to be in the nginx configuration.  It specifies the Ruby2.1.1 one.  Changed the ruby being used to the right one and it seems to have come back.  Phew!  Wonder why I didn't need to do that on the staging server.

The load on mach2 is running but I suspect it will take a lot longer than an hour.  It's spending most of its time in an i/o wait, and the major difference between mach2 and my laptop is that my laptop has an SSD.  I think it's going to be a while.
