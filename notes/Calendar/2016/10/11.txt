Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-10-11T09:29:55+01:00

====== Tuesday 11 Oct 2016 ======

Today I am inclined to take a break from the owned-locations stuff (which has grown rather) and step back for a couple of quick fixes, plus an enhancement.

The quick fixes will give me a chance to practice the idea of a hot fix.  They are:

[*] Add one more column to OTL's spreadsheet
[*] Suppress a spurious warning message

and then I want to do one actual enhancement which is:

[ ] Fix the design error in iSAMS's API, by creating the missing teaching group records.

Just noticed a potential problem in the way I am loading groups.  For the source_id_str I am just putting a number, but there could be more than one group of different types with the same number.  E.g. 3M Ma1a (teaching group) has "4191", tutor group 1M has "1M" and OH group "Guitar - Paul Owen" has "201".  Do I distinguish properly between types of group when doing my reload?

Ah yes - I am doing them separately by class.  When I do teaching groups I am looking specifically for something with class Teachinggroup, and then doing a find_by on that class.  It works like this:

'''
2.1.10 :001 > Teachinggroup.find_by(source_id_str: "4191")
  Group Load (0.2ms)  SELECT  `groups`.* FROM `groups`  WHERE `groups`.`source_id_str` = '4191' AND `groups`.`persona_type` = 'Teachinggrouppersona' LIMIT 1
 => #<Group id: 16015, starts_on: "2016-08-15", ends_on: "2017-08-14", created_at: "2016-08-15 15:08:56", updated_at: "2016-08-15 15:08:56", persona_id: 12601, persona_type: "Teachinggrouppersona", name: "3M Ma1a", era_id: 5, current: true, owner_id: nil, make_public: false, source_id: nil, source_id_str: "4191", datasource_id: 2> 
2.1.10 :002 >
'''
 

Note that, because I called Teachinggroup.find_by, there is an added requirement in the d/b query that the personatype  is set correctly.  It thus doesn't matter if two groups of different types have the same id string.  I will however need to put a prefix in on my artificially created ones to ensure they don't overlap with the numeric ones.

Actually, since all I have to identify the group is its name - e.g. "1M Ma" - I might as well use that as the source_id_str.  Normally I wouldn't because I want to keep the same group records even if the name changes, but in the current circumstance that won't be possible.  If the name changes, there will be absolutely nothing with which to tell that it is in fact the same group.  iSAMS's design error is creating a phenomenal amount of work.

I am inclined to do two passes through the timetable data - the first to find and create all the extra teaching groups, and then the second (the currently existing one) to create the lessons.  Anyway, do the hot-fix stuff first.

It doesn't actually need to be a hot fix, because the development branch is clean.  No work has been merged into it since the last release.  Perhaps I'll just do it off the development branch.

Need a fresh copy of the live database, and to switch back to the code as on the live system.

Doing the message suppression first.  Seems like a one-line change.  Tested - works.  Now OTL's change.  Also I think a one-liner.   Done and released.

Now to think about the fake teaching groups.  There may be more than one timetable in the iSAMS file, so when faking teaching groups I need to make sure that the same one is used.  I suspect that the MIS_Timetable module should be responsible simply for producing an array of unique set names.  The MIS_TeachingGroup module will then do the actual creation work, including deciding which tutor group they go with, and which subject they are.

Are tutor groups processed before teaching groups?  Yes, they are.

Unfortunately, all the timetable work seems to be done in the constructor of the class.  It may be difficult to get it to do some preliminary parsing.  When does it try to find the matching resources?  The method which does the work is called find_resources - when is it invoked?  At the end of the initializer.  Damn!

OK - I could do a separate class which just has the job of finding the set names.  It would need to share the same algorithm for deciding which timetable is to be used.

Or - the MIS_Timetable code seems to work in two phases.  First it finds all the timetables in the file, then it selects one and passes only that one to be built as a Schedule.  It's that latter phase which does the work of finding the right resources.  Can we split the code at that point?

Try it - without adding any extra functionality.  Dump the database before we run it in case of a complete mess.  That worked first go.

My life gets steadily more complicated.  Now we have the problem of deciding which of the list of tutor-group-based sets we actually want.  Many of them relate to the prep school - I don't want to create all those.  How am I currently discarding the prep school stuff.

Real teaching groups are filtered by year number.  All the prep school ones are 20+

How do I discard all the prep school's lessons?  No idea.  Am I perhaps loading them, but without any resources?  I don't see any at a quick scan.  Try a search.  No - they don't seem to be in the d/b.  Where are they being filtered then?

I seem to be relying on the week letters.  Every time I'm asked for a day's lessons I work out what week it is, then what day in that week, and then find the lessons.  I thus look explicitly for the lessons in week A, or the lessons in week B.  Since the prep school lessons are in neither, they don't get loaded.

OK - have instituted an ISAMS_FakeTeachinggroup class, which will do the work.  Unfortunately, my MIS_Group code can cope only with students as members, so I'll have to copy the membership from each tutor group rather than inheriting it.

Seem to have managed to load my populated groups, although I'm not using them yet.  The odd thing though is that one of the existing teaching groups got deleted.  Which one and why?  And was it actually deleted, or merely terminated.  It should merely have finished existence, and so it should have an end_date of yesterday.  Find it.  I seem top have two which ended yesterday - both of them tag groups.  OK - reload the database and run again with a bit more logging.

Ah - I think the spurious one is one which I created in an earlier run with a dummy name.  In any case, it doesn't seem to be there when I run it again.  Test again without --verbose.  Yes, seems fine.  Test again to ensure idempotence, then on to making the lessons use the freshly created teaching groups.  This should actually just involve removing the existing special-case code.

Once that's running, test by comparing some 1st and 2nd year timetables on the live and development systems.

Still need then to merge the finding of subjects.  Currently that is done in some school-specific code which decides whether the teaching group should have it or we get it from the lesson name.  I should be able to get rid of that, and put the subject identification code on my new ISAMS_FakeTeachinggroup class.

Charlote McCutcheon and Robert Jeffreys seem to have been added to the list of 1st year Biology teachers.  Why?  Because she teaches Biology to the 2nd year, and I hard-coded the year number as 7.  Need to fix that.

Just need to move the detection of subjects now.  We should be able to have all groups knowing their subject, and so the timetable slots can simply ask the groups rather than having to work it out for themselves.

Take a look at a couple of 1st and 2nd year schedules to see if differences have crept in.  They seem OK.  The schedule as displayed looks identical, but then you can drill down and see that the sets themselves have changed.

I suppose I should now re-load the database again and make sure there are no changes to my teachers groups when I do a data load.  Yes, teachers seem fine.  The pupil groups change, but that's because they're second generation anyway.  Good stuff.

Just need to sort out the identification of subjects now.

Do my new fake groups end up in the Markbook export files?  Yes, they do - but they're there twice - once with a subject and once without.  Now why is that?  Also, will Markbook cope with a non-numeric group ident?  We seem just to find teaching groups by name and year.  Now, why are they appearing twice?

Each appears to be created only once.  Ah - it's my export code - doing more work than it needs to.  It's trying to cope with the fact that the teaching groups don't exist, and it's creating them again.  Remove the extra code.  Now each of them is there only once.  I suppose I should test these new output files against my Markbook installation.  Seems to have produced very little in the way of change.  4 pupils changed group, but those are probably real changes.

I seem now to have that working.  It could be released as it stands, or I can merge it into my previous development strand, or indeed we can do both.  I would like to test it a bit more, so perhaps merging it into my other work is the best next step.
