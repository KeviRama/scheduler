Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-12-21T16:45:25+00:00

====== Wednesday 21 Dec 2016 ======

I have developed various features on separate branches on different machines.  The time has come for a bit of tidying up and consolidation.  First I need a list of the relevant machines, then an exhaustive list of branches, and then I'll decide the structure in which to merge them.

===== Machines =====

* Midnight
* Knight
* Enigma
* Liberty
* Xronos (live demo system)

===== Branches =====

Some of these would appear to have been superceded, but they still exist on certain boxes.  In that case, they can just be deleted.

==== feature/demo-system ====
Mainly exists on Xronos.  Elements of it need careful checking before being pushed back into the mainstream.  Could usefully use parts of feature/enhance-clash-checking from below, which will render at least one of its modifications redundant.  Adds nothing to the live system, but could usefully be updated with all the new features of the live system.  Therefore last in the chain - all the other changes get merged into it.

==== feature/shifting-oh ====
This one is an attempt to handle the strange way that OH groups in iSAMS get their dates changed.  iSAMS is happy to throw away historical data; Scheduler is not.  Not sure I want to push it live yet, but I might.  Exists on Midnight.

==== feature/show-memberships ====
Shows membership records for groups as well as the resulting members.  Useful for diagnosing when people joined and left groups.  On both Midnight and Knight.

==== feature/three-features ====
Redundant branch.  Has already been merged into develop.  Delete and ignore.

==== feature/repeating-events ====
Exists only on Knight.  A work in progress and not yet ready to be merged into the mainstream.

==== feature/enhance-clash-checking ====
Exists on Enigma.  Does two new things.
* The events to be clash-checked are now specified by a new flag on the event category, rather than being hard-coded.
* We also retrieve non-existent events, and if they have a flag/note then we remove it.

Non-existent events previously were not checked, and so you might expect them not to have such flags/notes, but it's possible that an event was checked and got a flag/note, but then changed to being non-existent (suspended).
Now pushed to repository.

==== feature/check-clashes ====
Old  branch which has been merged.  Delete and ignore.

==== feature/owned-locations ====
Old  branch which has been merged.  Delete and ignore.

==== feature/set-staff-active ====
Old  branch which has been merged.  Delete and ignore.

==== feature/local-login ====
Was just on Liberty but now pushed to the main repository.  Allows local login on a devlopment system without involving Google.  Can be handy when one has no 'net connection.  In theory quite safe to add to the main development stream, since it works only in development mode, but I hesitate to do it.

Probably best to gather them all together on one machine - Midnight - and then order them.

So - which do I want to include in a new release, and in what order should I merge them?

List:

* feature/show-memberships
* featue/enhance-clash-checking

and actually that seems to be it for immediate merging.  Much simpler than I thought.  There might be a couple of quick changes in the queue which I could do.

* Suppress warnings about orphaned cover records in iSAMS - just a count
* Stop it saying it has deleted 109 OH groups when in fact it hasn't.

Let's do those on a new branch, then have a big merge.

The first bit about suppressing warnings - that was easy.  The OH groups may be more difficult because it's all a question of dates.  Not sure precisely why it's happening though.  Pick one to test.  Two useful groups:

"Chess Club Reporting Only" (17774)
"Real tennis" (17780)

Be aware that those names may well have been used more than once by iSAMS.  Perhaps should log the iSAMS group IDs too.  Logging my database id, which will enable me to find the exact record.

Let's take a look at them.

Interesting.  Chess Club Reporting Only is a real group, starting on 2016-09-05 and ending on 2016-12-16, and yet it is marked as being current.  It should be over.  The dates have been jumping around rather, could that be it?

Right a method in the Group model to check for groups erroneously marked as current.  Show up precisely 109 anomalies.  Interesting.  How did they happen?  They should have gone away on 2016-12.16.  Take a look at the record for this particular group as it comes from iSAMS.  What is its iSAMS reference number.  Source id is 374.

Should fix my code in the model in ceases_existence() to check for this circumstance and fix it, but still would like to know how it came about.  Group 374 is completely missing from the iSAMS file.  It has been deleted from their d/b table.  (I get this info direct from the d/b and not from the API, so I know it's correct.)  When did it go?

It was there on the 16th, and gone on the 17th.  Ah, I begin to see how this could have happened.  Yes - on the 16th it had an end date of the 16th.  It thus had an end date in the database, but was marked as current.  Then on the 17th it was past its end date and so we thought it was over, but attempts to delete it failed because we already knew it was over.

Interesting.  Arguably we could do with some kind of batch job which checked all the groups and marked those which have rolled past their end date as over.  Similarly, the code for ending a group should do it correctly too.

We already have a daily job which runs at 06:30

Actually, given that groups can now be put in in advance, it should also check for groups which aren't current and should be.  Could log both instances to the log file.

Added that to my daily task, but it should really happen through the loader too.  Revert to database as loaded and try to do it that way.  In the Group#ceases_existence() method, I should check for the instance where it has slid past its expiry date but is still marked as current.

How will my loader cope with groups which are in the future?  E.g. group 86 "The Inklings".  I believe that is already in the d/b but set with future dates.  Don't seem to be able to find it.  Why not.  Aaaargh!  It's not called "The Inklings"; it's called "'The Inklings'".  The single quotation marks are part of its name.

Yes, it's currently in the database and marked as being not current.  Let's change its start date to today in both the source file and the database, then run the importer and see what happens.  It does indeed seem to have set its current flag to true.  Not sure how that worked though.  The call which does the dirty (well, clean) deed must be in group.ensure_db.  Yes indeed - there is explicit code there to handle this case, and it seems to work.  All good.

Can I package this up then?  How would it interact with my other changes?

Right - the following three branches should be merged into develop and then be tested thoroughly.

* feature/reduce-import-warnings
* feature/show-memberships
* feature/enhance-clash-checking

Don't seem to have that last one on Midnight yet.  Now do.  Note that it includes a database migration, so that needs to be done when it is pushed to live.  All merged.  Now test them all.  Fresh copy of live data.  After the data migration, one needs to set the clashcheck flag on Lesson and Other Half eventcategories.

Steps to put live:

[*] Backup database
[*] export RAILS_ENV=production
[*] fetch new code
[*] rake db:migrate
[*] touch tmp/restart.txt
[*] Edit eventcategories to set flag on Lesson and Other Half.

Release will be 0.15

It would then make sense to merge develop into my demonstration system, and enhance the code there to set up lessons as being for clash checking.  Done that.  I had to rename the migration which the demo-system code has put in because it needs eventually to be executed after the ones in the main development stream, but it had been created before.

Now - what about the "feature/shifting-oh" branch which has been sidelined for a while?



