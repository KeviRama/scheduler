Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-09-28T08:10:15+01:00

====== Wednesday 28 Sep 2016 ======

I started yesterday working on Cumulus configuration, then got distracted by issues raised by Niki.  The most significant was Henry Barnes getting himself thoroughly confused trying to book a room.

It doesn't help that people won't read instructions, and that Scheduler is being portrayed as a room-booking system rather than what it is.  However, I still need to do everything I can to prevent such confusion.  I did identify one very clear potential improvements - pending events should be displayed in the context of the pending resource to not only approvers, but also to admins and the original requester.  That way, if someone has turned off all their display except the requested resource (why?) they will at least still see their requested event, although no-one else will except the approvers and administrators.

That change I did yesterday.

So, initial objectives for today.

[*] Package up all my recent changes as a pending release v0.2
[*] Test all the changes again.
[*] Write release notes
[*] Actually do the release
[*] Install on the live system
[*] Transcribe my notes from yesterday's telephone conversation into Wunderlist.

After which I might get back to working on Cumulus, or I could work on more items from Wunderlist.  Decisions, decisions.

Looking at syntax checking for recurring events.  Two immediate issues:

[*] The existing code to dynamically load source files from lib/import/school isn't quite right.  It works by coincidence.
[ ] Some errors in the recurring files (syntax errors) currently raise an error, whilst others print a message.

The first problem is quite interesting.  I have the following snippet of code to dynamically load school-specific source files:

'''
Dir[File.join(File.dirname(__FILE__), "school/*.rb")].each do |file|
  require file
end
'''


and this was working fine when I invoked the utility using a path of:

''../../lib/import/misimport.rb''

but it doesn't work if I start from a different directory (two up) and invoke it as:

''lib/import/misimport.rb''

I think this is because the former ends up with ..s on the start of it.  Let's do some test code.

Yes, it is much as I thought.  Given the following directories and files:

'''
able
baker	-> util.rb
	-> dynamic	-> a.rb
			-> b.rb
'''

Then the above code works if I'm in the baker directory and do "ruby util.rb" - the files are seen as ./dynamic/a.rb etc.  It also works if I'm in the able directory and do "ruby ../baker/util.rb" when the files are seen as ../baker/dynamic/a.rb etc.  Where it doesn't work is if I am in the parent directory of both able and baker and do "ruby baker/util.rb" Then the program tries to load "dynamic/a.rb" and this fails because we're not on the load path.  I need to force the paths to some kind of absolute evaluation.  File.absolute_path seems to give me what I need.  Let's try it in the original code.  Seems fine.

Now - can I make my reporting of errors a bit more consistent.  It would be nice to give a positive result if all is well.  Or I could go for the UNIX traditional approach of saying that silence means that all is well.

Hmmm.  There is a little bit of logic to the current processing.  If the file structure has an error, the system will simply refuse to process that file and move on to the next one.  This is when an exception gets raised.

However it's also possible that the structure (syntax) is fine, but something is wrong with one of the proposed events in that at least one of its resources can't be found.  In that case we do still go on and load the other events from the same file.  It doesn't make sense to raise an exception because that would prevent further parsing - and indeed prevent detection of later similar errors in the same file.  I think it's best as it is.

Tweaked the options so you can now invoke the utility with our without a --quiet option.  With the quiet option and no issues, there is no output at all.  Without the --quiet bit you get messages telling you what it's done.

Done.

On then to the Locations => Owned menu option.  Whilst I'm about it, it would be good to improve the pagination decoration at the top and bottom of these lists.  I'm sure I've done it on at least one of them, but I can't find an improved one at the moment.  Could it be in some stashed code somewhere?  Ah - it's on the search results page when one searches for events.

12:30 - lunch time.

I realised this afternoon - after quite a lot of thinking - that the current dialogues which let you see individual resources really are little more than what was provided by the skeleton framework of rails.  Something much better is needed, probably built around searching for elements.  A single, very flexible searching form that lets you handle any resource.  In-active resources - those that aren't really meant to be in the system at all - can continue to be handled the old way.  Things that are done and over with do not get their active flag un-set - instead they get their current flag unset.

Note that elements and events will still need to be handled separately.  Elements come first, because events are already well represented through the calendar, although more is probably needed.

