Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-07-24T06:27:53+01:00

====== Thursday 24 Jul 2014 ======

Despite having implemented restrictions on menu access, I still seem to be getting someone else editing my records.  Hugh Price seems to have been messed about with yesterday.  Let's take another look.  Perhaps first on my list today should be the implementation of real access restrictions.

It's noticeable someone keeps trying to get a URL of just "/eak".  Suggests a script of some sort.  I think a web crawler is one of my problems.  That should be easy to fix.

Hugh Price is ID 2065.  Yes, it was edited at about 02:28 this morning.  Last edit of any sort was on 15/7 and may well have been me.  Yes, it was when I was marking staff as active.  Where did the request come from?  188.143.232.211.  Does not translate to a real domain.  There were 25 requests of various sorts from there.  It's interesting how it's still being found, despite the removal of the menus.  I've had no-one register an account apart from school staff, which suggests that the links are being remembered somehow.

First check is to make sure only logged on users can access anything other than just the calendar page.  Block access to everything except the basic page, and the json function needed then to gain events.  Within that function, restrict what events may be accessed.  Also set up a robots.txt file.  Also need to allow access for ical files.

[*] Block everything, except for a logged in administrator
[*] Allow access to calendar page
[*] Allow intelligent access for events
[*] Add robots.txt
[*] Make sure ical still works.
[*] Allow users to log in and out.
[*] Deploy


That was fine, but more is needed.  It should be possible to display more details for an event, and logged in users should be the only ones capable of creating new events.

[*] Display details for events (regardless of login state)
[*] Disable event creation unless a known user is logged in

Added the "current" flag to the element record.  Small maintenance method to copy them from the corresponding entity.  Added code to keep that up to date.

Now trying to get the renaming of a teaching group to get all its events to be renamed.  This means an extra flag in the commitment record "names_event" and then a maintenance method which sets that flag for all commitments of a group to a SchoolBase Lesson event.  Need to modify the import code to set that too.

Ah - Chapel and Assembly events are currently categorized as lessons, which isn't quite right.  They also shouldn't get the "names_event" flag set.  I don't need to change that as well, but perhaps I should.

Why do I have so many commitments in my database?  It seems an awful lot.  The commitments_on method in the Commitments model also needs re-factoring to work with the current version of Rails.

Done the re-factoring.  There are nearly 7000 commitments in a normal school week, so it's not surprising that we have nearly 300,000 overall.  However, the run I just did, although long was in fact broken.  I need to reload the database and set things up again.

Incidentally, I got 110981 the first time.

[*] Reload database
[*] Run migrations
[*] Re-copy the current flags to element records
[*] Re-set the names_event flags.

At the second run, only 108293 records were updated.  Now, can I implement an after_save method on my element records to cause events to be updated?  Done.

Now for the loader.  It needs to do some extra things:

[*] Set the names_event flag as appropriate
[*] Update names_event flag for existing commitments
[*] Check eventcategory for existing events
[*] Check event name for existing events
[*] Perhaps put assemblies and chapels into separate categories?
[*] Test event renaming by doctoring file from SB

All for tomorrow.

The loading utility is now able to set the "names_event" flag too, and does it much faster.  Partly because it is dealing with only one year's events.  How many flags does the dedicated method set?  108293 again.  How many does the loader set?  Do they disagree at all?

Running the loader (which acts only on one academic year) sets 24004.  This will be just the autumn term, whereas 2013/14 has the whole year there.  Now run the setter utility method.  It takes a phenomenal length of time - it must be possible to make it a lot faster.  It set 84289 flags.  Which comes to the same total.  Now run the loading utility again to make sure it doesn't disagree about anything.  Managed to make it lot faster with a bit of pre-loading.  Now does the loading job in 8m49s, where before it was more like 45mins.

Interesting phenomenon - each time I run the loader script it says it's removed one student from a tutor group, even though it's already done it.  It's a date thing again - I'd forgotten to set the date on the remove_member call, so nothing was happening.  Fixed it.

Right - I really would like to finish off all this stuff and promote it to the live system.

Editing the input files from SB to change a couple of set names.  If I do that, then the group loading code should handle the rename before we get to do_timetable.  Try it with a couple of my own teaching groups.

It seems to have worked.  As far as the utility was concerned, it just amended a few teaching groups, but the core code then went on and changed all the events.  Hunky!

Now I need to work out the steps needed to put all this back on to the live system.

[ ] Dump live database
[ ] Stop nginx
[ ] Get new code on to live system
[ ] rake db:migrate
[ ] export RAILS_ENV=production
[ ] rails c
[ ] Element.copy_current
[ ] Commitment.set_names_event_flags
[ ] exit
[ ] run importsb to check things and amend event categories
