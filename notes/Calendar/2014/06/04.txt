Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-06-04T15:06:57+01:00

====== Wednesday 04 Jun 2014 ======

Trying to streamline my event selection code in event.rb.  It is really important for this to be clean and fast, ideally selecting any required collection of events in a single d/b hit.

I had it working well enough before, but the syntax has changed in Rails 4, and now you use "where" where before you would have used "find".  It's slightly neater, but not quite as good as I would like.

The ideal would be to pass a hash of parameters to where(), but from the Rails documentation it appears this can only cope with checking for equality, ranges or subsets.  I want to be able to select all events with a date before or after a specified date, which effectively is an open-ended range, so it appears I can't do this.

I will therefore have to use the string-with-parameters option.  This I have got working with the new syntax, but currently I have potentially four separate call points (although only one of these is used for each invocation).  If I add another criterion (like event_source) that will double the number of calls, and carry on doubling each time there is a new one.  It would be much nicer to be able to construct things dynamically.

I could potentially do it with just one, but can I dynamically decide whether to include the joins() call.  The d/b fetch still works even when an unnecessary call to joins() is made, but it makes the d/b call much slower.  3.1 ms instead of 0.2 ms in a test case.  Can I use a temporary variable when doing a join?

Yes - it appears I can.  I may therefore be able to build up a query string and hash of parameters and have just a single point in the code where the query is executed.  Done that - excellent.

Now I think I need to tidy up the SchoolBase loading code.  I need to be more systematic about how I load stuff, and keep things up to date as I go along.  The logic of the code should be much cleaner and clearer.  I'm going to follow a philosophy of checking each type of thing as I load it, linking to the database where appropriate, then discard unwanted stuff (like pupils at the prep school).
