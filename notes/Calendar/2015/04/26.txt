Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-04-26T10:56:41+01:00

====== Sunday 26 Apr 2015 ======

Noticed something odd in the nightly processing log over the last few days.  On 21/4 it came out with:

Field current differs for 6SJ
d/b: "false" SB: "true"
1 tutor group records amended.
Removed 15 pupils from tutor groups.
Added 15 pupils to tutor groups.

and then on every day since it has said again:

Added 15 pupils to tutor groups.

It's clearly something to do with the SJ tutor group.  SJ was temporarily acting as housemaster last term, and has presumably gone back to being just a tutor.  Why does it feel the need to re-attempt the add every day?

6SJ does indeed seem to have 15 pupils in it.  They are:

'''
Wilfred Wong (6SJ)
Bradley Hayday (6SJ)
Harry Thomas (6SJ)
Bertie Boyd-Gorst (6SJ)
Bruno Rogers (6SJ)
John Cheung (6SJ)
Ryan Ling (6SJ)
Jeremy Lyons (6SJ)
Evgeniy Neviditsin (6SJ)
Tim McGovern (6SJ)
Henry Hart (6SJ)
Henry Fulford (6SJ)
Dominic Nip (6SJ)
Jeremy Chan (6SJ)
Kenrick Wong (6SJ)
'''


It would be interesting to check the membership records for just one of them and see when he became a member, and if he was ever a member before.

Just loaded the d/b dump on my test system.  I can add some diagnostic code if needs be.

It would appear that my loader code thinks that the boys are not members of the group, and so tries to add them, but the group management code thinks they are and so doesn't.  Why the disagreement (assuming that diagnosis is correct)?

Ah - it appears that the group ended on 2014-12-15, presumably when it was set to be inactive.  Now we're trying to resurrect it.

Yes, the tutorgroup has 30 membership records, but only 15 members.

Memberships 0 and 15 both relate to Wilfred Wong.  0 ran from 2014-08-28 to 2014-12-15
15 starts on 2015-04-21 and doesn't end.

There are several issues here.  My group code should have detected the problem and not allowed the inconsistent situation to arise in the first place.  My loading code needs to sort out what it intends to do in this circumstance.  Are we allowed to have two groups with the same name in the same era?  Should we create a fresh group or resurrect the old one when a group goes away and then comes back?

Philosophical question - if a tutor group goes away during the course of an academic year, but then comes back again, is it the same tutor group or a different one?  What do I mean by "comes back again"?  That last part is easy - if a member of staff has had a tutor group which was deleted earlier, but then he or she acquires a new one, is it the same tutor group?

I suppose there are two circumstances.  For the current case of SJ, it is clearly the same tutor group.  It has the same pupils, and is for the same year.  Another situation could however theoretically arise.  A colleague might be, say, a tutor for 3rd year Cotton's in the Michaelmas term (perhaps filling in for maternity leave), then stop doing that, but then be a 6th form tutor for Morgan's in the summer term for much the same reason.  Those two definitely aren't the same tutor group.

I suppose a limiting case would arise where rather than deleting one and then creating the other, whoever maintains SB might do it all in one go, in which case we would simply shadow the changes which they've made.  Other than that, when thinking of resurrecting a group, we should ensure that house and year match too.  If they don't, then we create a new one rather than resurrecting the old.  We also then need to be aware that, if we look for a tutor group by staff id, we might find more than one, but only one active one at any time.

Perhaps if the house and year match then we resurrect the old group, but if they don't then we create a new tutor group.  We also need to modify the member addition code to stop it accepting new memberships for a group which has ended.

How does a tutor group get its name?  It doesn't seem to be in the file coming from SB, but nor can I find any code where I create it.  It must be here somewhere.  Ah yes, we do it in the initialisation code.  Another case where I should have put more of the work into the object itself.  Tidied that up.

I suppose I should fix the group membership code first so that it refuses to create new membership records starting after the group has ceased to exist.  Then I delete the second 15 membership records already there, and run my loader code to see how well it copes.  I make a simple call on add_member on the group model.  Its current policy if it doesn't like something seems to be to log the issue, but do nothing.  Not sure that's right, but I'll continue with it for now.

Remembered something else - if you don't specify an explicit date for a set which has ended, it will give you its final membership, and not an empty list.

OK - put the extra check in the group model.  Try running the load again.  Seems to have been effective.  However, the client code doesn't notice that the adds have failed.

Perhaps I should adopt a policy like rails does.  My current add_member method does not return any meaningful information, therefore none of the client code can be relying on it.  It also doesn't intentionally raise any errors, which means client code could be relying on that bit.

I can add a status indication, indicating whether or not it added the member, and in the future I could add an add_member! method which raises an error if the addition fails.

I will return true if it added the member, and false if it didn't.  Note that one of the reasons for returning false could be that the element is already a member at the indicated time.  Effectively a return of false means that nothing has changed - a member has not been added.

Currently I key tutor groups purely on the id of the tutor involved.  If I'm going to allow to two tutor groups to exist for the same tutor in the same year, even if only one of them is current, I'm going to need to enhance the key.  I could let it be an array of things (tutor, year, house), or just switch to using the name as the key field.  The latter would distinguish between groups as long as tutor or year was different, but would think that two groups for different houses were the same one.

Done it as a hash.  Involved enhancing my DatabaseAccess model in the loading code.

Now to fix the original problem.  I need to check for each tutor group whether it has been deactivated at some time in the past.  If it has, then I don't just set it back to current, I need to remove the end date from its d/b record.
