Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-06-13T16:17:42+01:00

====== Saturday 13 Jun 2015 ======

Taking a look at the way that events are fed through to the schedule display in the calendar view.

This is handled by the schedule controller, in an action called "events".  What is passed through depends on the current logged on user, and on what is requested.  Each user may have one or more Ownerships and one or more Interests.  Ownerships are relatively static; Interests are dynamic.

N.B.  A user with no Ownerships is treated as if they weren't logged on at all and can't specify what they want to see - they just get the public calendar events, regardless of what they asked for.

For interests, you only get the events by asking for them - it's up to the front end code to make the appropriate request.  For ownerships, the events come through in a lump when the front end asks for element 0.

Pseudo code:

'''
If user logged on and known
  If specified an element other than 0
    If element is one of the user's current interests
      Collect events for that element
    Else
      Empty array
    End
  Else
    Interesting algorithm which needs more investigating.
  End
Else
  Collect public calendar events
End
'''


Now I need to disentangle the interesting algorithm.  It has definitely "just growed" over the months and needs tidying up.  Currently it appears that it ignores all the Ownership records except the first "me" one.  It should return appropriately coloured events for all the Ownerships.  Processing is as follows:

Take the first Ownership "me" record and find associated events.  Call those events_involving
Split events_involving into mine and notmine depending on whether or not the user owns them.
Select all events owned by the user, and subtract mine from them, to yield myotherevents
If the user has a preferred event category then gather those as preferred_events


events_involving	- Events the current user is committed to
mine			- Subset of events_involving which the user owns.
notmine			- Subset of events_involving which the user doesn't own.
myotherevents	- Events the user owns but isn't involved in.
preferred_events	- Events in the user's preferred category.  (Bit of a frig.)

Then all of these are combined to form @schedule_events, which is an array of ScheduleEvents passed to the view.  The combination is as follows:

notmine			- Coloured by the "me" ownership record 
mine			- Coloured by the user record's "colour_involved"
myotherevents	- Coloured by the user record's "colour_not_involved"
preferred_events	- Coloured green (still a frig)

and then finally we collect all the events flagged as "for_users", meaning they should appear on everyone's schedule.  From these are subtracted "mine" and "myotherevents".  Why not "notmine"?

The preferred_events nonsense is only there so Karen, Lou and Heidi can see all the calendar events.  As soon as calender-ness becomes a resource this should go away.


I need to make all the other ownerships appear too, and they should be in their own colours.  Ideally even mixed with the ownership colour if the user owns them.

I think "I own it" needs to be the final excuse for showing something.  Things get shown with the "I own the event" colour as a last resort, after all the other reasons for showing it.

Actually, there is presumably a pecking order.

I'm involved
I own an entity which is involved
I'm interested in an entity which is involved
I am the organiser of the event
I own the event

Can I make it so that any event appears only once ever?  Not quite.  If I express interest in more than one entity, and they are both involved in an event, then I would expect to get a visual indication of that - that is, the event should appear more than once.
