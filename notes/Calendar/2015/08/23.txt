Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-08-23T08:49:31+01:00

====== Sunday 23 Aug 2015 ======

Today I propose to back-port one or two of my optimisations in commitments_on to the master thread, provided they produce a significant improvement in actual use - only those that don't change the semantics though, basically just pre-loading.  As far as I can remember, the only thing which uses commitments_on at present is the ical function.  Yes, it is.

Files modified:

models/element.rb
models/group.rb
controllers/schedule_controller.rb

I'll take copies of those from this branch, then try importing bits in a separate branch, using my notes from yesterday to identify the worthwhile bits.  Benchmark with:

School calendar
My calendar
Angus Alder's calendar

all specified by element_id without any modifiers.  New branch - speed_up_commitments_on

Initial timings

School calendar		17424
My calendar			10375
Angus Alder's calendar	10036

Always start by loading the school calendar twice, and take the second timing.  This is to remove startup issues.

S:	2564ms (15.5ms)
M:	3779ms (447.9ms)
A:	15960ms (967.8ms)

Now the best improvement seemed to be achieved by putting a slightly complex preload into the group model.  Add that.

S:	2660ms (18.2ms)
M:	2941ms (49.4ms)
A:	6027ms (264.9ms)

As expected, the most dramatic improvement is for Angus, who is the one with the most complex set memberships.  Now, very close to that was a slight optimisation which avoided loading all the entities, just to check their types.  Add that one in.

S:	2691ms (43.0ms)
M:	2877ms (37.2ms)
A:	5669ms (196.6ms)

Still worthwhile.  What else?  The only other changes in that model are debug messages.  Now in element.rb I've also tried a pre-load.  Shove that in.

S:	2641ms (61.8ms)
M:	2802ms (45.1ms)
A:	5678ms (165.4ms)

Less convincing.  Now the other change I made actually changes the semantics of what it does, but theoretically only for memberships with an "as_at" value set.  Since I currently have none of those, it shouldn't matter.  Try it.  What it does is to ignore at an early stage any memberships which are not active on the specified date.

S:	2530ms (35.1ms)
M:	2721ms (22.6ms)
A:	4047ms (182.0ms)

As ever, it's Angus with his more complex set membership who sees the biggest benefit.  The Calendar doesn't belong to any sets, so there has been practically no change there.

Now, did any of the files change during the course of the tests?  File sizes at least seem to be constant.  Use md5sum as a quick test.  All perfect.  For a student this produces a 4-fold speed improvement, for a staff member a 28% reduction in time (38% improvement in speed), and for the calendar (which belongs to no groups at all) pretty much static.  Seems worth putting live.

Can it affect anything else.  The commitments_on method is used only by the ical function, but what about the "groups" method in element.rb.  I have actually changed the working of that very slightly.  Is it called from anywhere else?  Yes, it's used quite a lot.  Will my change genuinely not affect anything?  I've thought about it carefully, and my conclusion is that it won't.

Downloading Angus's ical on the live system takes 8501ms (it's a slower processor and a physical HDD).  Try the live calendar.  That took 4729ms.  Check for a historic case.  It seems to have been about 5200ms before, so possibly a slight improvement.

Doing a faster version of my membership code.  It's fast, but I think it could be made faster.

I seem to have lost my groups called "Middle school" and "Upper school".  Why?  It seems to have stayed with the previous year instead of being converted to the perpetual era.  What about Lower school?  Ah - "Lower school" has ended, but there's still one called "Lower school pupils".  Where did that come from?  It's in the perpetual era.

Ah - "Lower school" seems to have belonged to me personally.  "Lower School pupils" is created by my script.  For some odd reason though, I never got around to doing the same for Middle School.  I could of course do it in my extra_group_groups file.  Done that.
