Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-12-05T07:14:31+00:00

====== Saturday 05 Dec 2015 ======

Things to do to get to having something demonstrable, although not finished:

[*] Allow approvals from show screen
[*] Amending a requirement should unapprove the resource
[*] Finishing off editing should throw you into show if there are any notes needed.
[*] Newer version of the editing page (from the private events branch)
[*] Amend note template to have two fields
[*] Link note to template (delete => nullify)
[*] Provide a "Cancel" button on note editing, and on event editing
[*] Do we actually want a "Refuse" option?  Would it not be better to have "Accept" and "Send back message".
[ ] Get attachments working?
[*] Print notes in the Days report when requested.
[ ] Need scope for a reminder prompt in the event editing dialogue - "Think about services - porters, parking..."
[*] Allow for a template which simply adds a note to the event - which the user can't edit - giving them a message.
[*] Add minimal event information to the bottom of the show form, and remove it from the edit form.
[*] Perhaps move the delete and clone buttons too.
[*] Need to be able to delete promptnotes.

The template provides some default contents for the note, but until the user first edits the note the text is not copied across.  The template's default contents are displayed as if they were the contents of the note.  That way, if the owner of the template amends it then the display will change too.  If the user has no edit permission for the note, then the contents will never get copied over.  The default contents might be just a message - "Please submit a catering request form".

Need to tidy up the code and html around showing and editing events.  There used to be three ways to get at editing an event:

* Click on it in the calendar
* Choose edit from the administrative event listing (thousands of pages).
* Clone an event (from the edit dialogue) and start editing the new copy

The code told the first two apart by checking whether it was an xml_http_request.

''if request.xml_http_request?''

If it was, then the request was an AJAXey one coming from JavaScript running on the client.  This makes a bit of difference to the content of the reply.  The third one was always a remote request, resulting in a JavaScript response.

Under my new regime, the first way of calling it up goes away, and a new one arises.  You can now get to the edit dialogue by:

* Choosing edit from the administrative event listing
* Choose edit from the the dialogue which is already showing the event
* Clone an event from the edit dialogue and start editing the new copy

I need to get these three types of request really clear in my mind, and the distinction between them.  What dictates when I will give a js response rather than an html response from the server?  It seems that the client actually //asks// for the type of response which it wants.  When I specify "remote: true" on a link or form, then it sends up a js type request and expects a js response.  When I send a query from my own JavaScript it goes up as HTML.  Not sure about this, but it does currently seem to work.  I'll leave investigating that further for now.

I need to make sure I know the exact structure of my page, so I can replace bits of it as required.  Then I want to control what actually goes in my form so I can 
