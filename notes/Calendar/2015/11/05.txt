Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-11-05T08:44:55+00:00

====== Thursday 05 Nov 2015 ======

Started today by propagating Tuesday's work onto the staging server.  It seemed to go smoothly.  Also brought over a fresh copy of the live data to the staging server and converted it.

Today I think I'll start with the business of getting the screen to refresh as the dialogue box closes, controlled by a flag.  This will serve for when requests have been approved/rejected, but also for the normal refresh mechanism when the user clicks on "Update".

The first question is where to put the flag.  It could be attached to the calendar element (on the grounds that that's the thing being refreshed) or to the dialogue box element (on the grounds that it's the thing causing the refresh).  I'm inclined to go with the former for now.  Put a data element called "data-dorefresh" in the element.  Set it to 0 by default, and 1 if a refresh is needed.

Just found something odd in:

''app/views/commitments/approve.js.erb''

where I find the lines

'''
$('#event_resources').html("<%=j render partial: "events/resource", object: @event, locals: {editing: @editing} %>")
$('.rejection-link').click(window.noClicked)
'''


I can see what the first one is for, but I have no idea why the second one should be there or what is intended to do.  Only a week or two since I wrote it too.  Ah - got it.  It's re-priming all the rejection links to prompt for a reason.  All the links have been reloaded so they need to be re-primed. The same code should be in ''reject.js.erb'' too.  All I need to do is add code after that to set my flag too.

Seems to work.  Now arguably, I should re-fetch events whenever a user adds or removes an asset from an event too.  Currently the re-fetch occurs provided they click on update, but not if they just close the window.  There are two bits of JavaScript currently sent which cause a refetch.  Both of these should be capable of using the flag instead.

'''
john@midnight:~/Work/Coding/scheduler$ grep refetchEvents app/views/*/*
app/views/events/destroy.js.erb:$('#fullcalendar').fullCalendar('refetchEvents')
app/views/events/update.js.erb:$('#fullcalendar').fullCalendar('refetchEvents')
john@midnight:~/Work/Coding/scheduler$
'''
 

Will they still work?  Test.  No.

Come to think of it - anything which refreshes the list of resources needs to re-activate the rejection links too.  Perhaps I should provide a window method which does the whole job.  They're all in the commitments view.

All done, and seem to be working.  I've also made the count of outstanding things update each time you approve or reject one.

Next I think I'll do the bit of making sure a concern is set to visible when the approver tries to view the outstanding event.  This needs to be done through the re-direction link.  Done that.

Next I think I want e-mail notifications.  These are slightly trickier, but I've done e-mails before and I think I can afford to send them in real time (rather than queueing them for later).

A user should get an e-mail if:

* A request is rejected
* An event becomes complete

An approver should be able to request daily e-mails if there are outstanding requests.

Now, how does one do e-mails?  ISTR that templates are involved, and then you shove in details to go with them.  UserMailer seems to be the relevant model (or is it a controller?)  Neither - it's in a directory by itself called mailers.

DJD envisaged the situation where someone would request a calendar entry and he would decide that it simply wasn't appropriate - note, not that the event couldn't happen, just that it shouldn't be in the calendar.

We talked about him rejecting the request if there was some sort of clash issue - e.g. because too many events were at the same time - with a message like, "Could you put it on the Thu instead?" or simply deleting the commitment if he felt it wasn't suitable for going in the calendar.  The implication of the latter case is that he has no problem with the event, but just doesn't want it in the calendar.

Can I generate an automated e-mail in that instance?  Conditions would be:

* Commitment deleted
* Commitment was tentative
* Commitment deleted by someone other than the event's owner

and then the e-mail should probably include a bit of extra text if the deletion has rendered it complete.  Note that approvers/rejecters won't normally be able to do this.  It's an extra permission bit.

Just noticed something really odd on my staging server.  I have an event there which is due to run from 17:05 - 17:45 but it's being displayed with "17:05 - event name" in the box.  Is it because it is short in duration?  If I change it to 17:05 - 18:05 then it's displayed as expected.  Try five minute decrements.  Yes - at 17:05 - 17:50 it's displayed as expected, but with the end changed to 17:45 it changes.  What about 17:40?  The same.

Actually, now I look there are lots of these.  I just haven't fussed about them before.  It's clearly just FullCalendar's way of trying to fit the text in.

Another oddity.  Opening and closing an edit box now seems to cause a refresh regardless.  A display box doesn't  Why is this?  Does it also happen on my development system?  Yes, it's happening my development system too.  Investigate.  Just changed the code a tiny bit, and it's stopped happening.  Odd.

Got it - the thing is, I'm not unsetting the flag after I've done it.  Once it's decided to re-fetch, it then re-fetches every time.

Modified the event model, so it only considers firm commitments when looking at what elements it has.  Tentative commitments are of interest only to the code which I have already developed for editing them.
