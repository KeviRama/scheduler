Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-10-15T10:27:01+01:00

====== Thursday 15 Oct 2015 ======

Right - today we start on actually implementing the permissions features.  Various flags need to be added to models/database records.

I need to remove quite a lot of the existing "owns" flags on concerns.  Individual users will no longer own their staff record, because I don't intend at this stage to handle event invitations through the system.  It's just intended for venues and properties.  Too few people use Scheduler yet to rely on them responding to invitations.  Possibly put that back later.

So, new flags are:

==== Event ====

== Complete ==
Boolean, defaulting to true.  Gathers together the status of all the event's commitments.  The event is complete if none of its commitments is tentative.

== Constrained ==
Boolean, defaulting to false.  Gets set to true if the event has been granted a commitment to a controlled resource, and means that the owner of the event can now only edit it in a limited way.  He can add or remove resources, but he can't change the time of the event.

Someone owning one of the controlled resources, provided he also has the "controls" bit //will// still be able to change the time.  Thus if someone wants to re-scheduler a calendar event, he can either remove it from the calendar, change the time, then re-apply for calendar approval, or simply ask the calendar controller to change the time.

==== Commitment ====

== Tentative ==
Boolean, defaulting to false.  When someone creates a commitment it will normally not be tentative, but if the requested resource has an owner, then it will be tentative, and the owner's approval will be needed to stop it being so.

== Rejected ==
Boolean, defaulting to false.  If the resource owner rejects the request, this gets set so the requester knows that the it's been rejected.

Tentative = false, rejected = true is not a valid state.

==== Element ====

== Owned ==
Boolean, defaulting to false.  Set to true if a concern is set up with the owned flag set to true.  Exists merely to speed up processing.  Has two effects:

1. If someone tries to set up a commitment, it gets marked as tentative.
2. The element is no longer offered for group membership in the groups dialogue.

If you could put an owned element into a group, you could circumvent the permissions system.


We then need additional functionality as follows:

[*] Clean up existing concern records and set most of the owns flags to false
[*] Stop users deleting concerns with themselves - check the equality flag
[*] Stop users being set as owners when the user record is created.
[*] For all existing concerns, set the corresponding owned flag in the element record
[*] Make sure future updates to concerns keep the element record in step
[*] When adding elements to an event, check for ownership and set the tentative flag.  Display this status somehow in the dialogue.  If the current user is actually the owner, don't set the flag.
[ ] When displaying events for an element, do not display ones with a tentative commitment, unless the user has ownership of the element.  In that case, make them visually distinctive - faded out?
[*] Likewise, when generating a calendar download, don't include tentative commitments.
[ ] Whenever an event has tentative commitments, flag it as incomplete.
[ ] Remove owned elements from those offered in the groups dialogue
[ ] Constrain editing of constrained events by their owners.  No time changes.
[ ] For element owners, provide a visual indication when the element has tentative commitments
[ ] Allow element owners then to view and approve or reject such commitments
[ ] Enhance the user editing dialogue to allow ownership to be given and/or taken away.
[ ] If an owned element loses its last remaining owner, should I automatically approve all tentative commitments? This might cause problems if, for instance, the person responsible for the calendar is changing and whoever does it deletes the old person before setting up the new one.


What have I forgotten?  Doubtless I will find out.

Currently there are 350 concerns in the system, of which 112 are owning concerns.  Most of these probably need to go.  What happens if I write some code to find any concern which is concerned with a member of staff and remove the owns flag?  Do I rely on it for any of the current behaviour?  Does it control the can_delete? flag?  Yes, it does.  Currently the logic is that you can't delete it if you own it or control it.  I need to add a further constraint and say you can't delete the concern if you are it.

Also need to change the logic for creating a new user so they no longer own themselves.

After deleting ownerships of staff, I'm down to just 29 ownerships.  Still seems a lot though.  4 pupils too and I'm down to 25.  Of those the only one which I think is wrong is that Nick Lloyd currently owns the calendar.  I can deal with that separately though.

Now If I log in, I have the option to delete my own concern with myself, which is wrong.  Fix that.  Done.

15 elements now seem to have owners.  Good.

I need to set up some callbacks on Concerns to cause them to update Elements with their ownership status, but I need to be slightly careful to avoid a deadly embrace.  It seems obvious to hook:

* after_save
* after_destroy

and provided they are all direct calls it should be fine.  However, if the concern is being destroyed because the element itself is being destroyed, I need to make sure we don't end up in a loop.  How does one do that?

Some suggestions here:

https://github.com/rails/rails/issues/13609

Let's try it.  Seems to work, including the bit where I delete the entity underlying the element.

