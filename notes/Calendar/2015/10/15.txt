Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-10-15T10:27:01+01:00

====== Thursday 15 Oct 2015 ======

Right - today we start on actually implementing the permissions features.  Various flags need to be added to models/database records.

I need to remove quite a lot of the existing "owns" flags on concerns.  Individual users will no longer own their staff record, because I don't intend at this stage to handle event invitations through the system.  It's just intended for venues and properties.  Too few people use Scheduler yet to rely on them responding to invitations.  Possibly put that back later.

So, new flags are:

==== Event ====

== Complete ==
Boolean, defaulting to true.  Gathers together the status of all the event's commitments.  The event is complete if none of its commitments is tentative.

== Constrained ==
Boolean, defaulting to false.  Gets set to true if the event has been granted a commitment to a controlled resource, and means that the owner of the event can now only edit it in a limited way.  He can add or remove resources, but he can't change the time of the event.

Someone owning one of the controlled resources, provided he also has the "controls" bit //will// still be able to change the time.  Thus if someone wants to re-scheduler a calendar event, he can either remove it from the calendar, change the time, then re-apply for calendar approval, or simply ask the calendar controller to change the time.

==== Commitment ====

== Tentative ==
Boolean, defaulting to false.  When someone creates a commitment it will normally not be tentative, but if the requested resource has an owner, then it will be tentative, and the owner's approval will be needed to stop it being so.

== Rejected ==
Boolean, defaulting to false.  If the resource owner rejects the request, this gets set so the requester knows that the it's been rejected.

Tentative = false, rejected = true is not a valid state.

== Constraining ==
A flag to indicate that the commitment constrains the event.  Basically gets set whenever a tentative commitment becomes a firm one.  Exists to avoid having to follow through all the commitments to an event when checking whether the event is constrained.  It would be necessary to go:

Event => All commitments => All elements => All concerns => Find ownerships

otherwise to decide whether or not an event had any constraints.

==== Element ====

== Owned ==
Boolean, defaulting to false.  Set to true if a concern is set up with the owned flag set to true.  Exists merely to speed up processing.  Has two effects:

1. If someone tries to set up a commitment, it gets marked as tentative.
2. The element is no longer offered for group membership in the groups dialogue.

If you could put an owned element into a group, you could circumvent the permissions system.


We then need additional functionality as follows:

[*] Clean up existing concern records and set most of the owns flags to false
[*] Stop users deleting concerns with themselves - check the equality flag
[*] Stop users being set as owners when the user record is created.
[*] For all existing concerns, set the corresponding owned flag in the element record
[*] Make sure future updates to concerns keep the element record in step
[*] When adding elements to an event, check for ownership and set the tentative flag.  Display this status somehow in the dialogue.  If the current user is actually the owner, don't set the flag.
[*] When displaying events for an element, do not display ones with a tentative commitment, unless the user has ownership of the element.  In that case, make them visually distinctive - faded out?
[*] Likewise, when generating a calendar download, don't include tentative commitments.
[*] Whenever an event has tentative commitments, flag it as incomplete.
[*] Remove owned elements from those offered in the groups dialogue
[*] Constrain editing of constrained events by their owners.  No time changes.
[*] Need to apply these constraints at the server end too.
[*] For element owners, provide a visual indication when the element has tentative commitments
[*] Allow element owners then to view and approve or reject such commitments
[ ] Enhance the user editing dialogue to allow ownership to be given and/or taken away.
[ ] Allow element owners to choose to receive e-mail notifications of requests
[*] When approving a commitment, one should be able to see what other approvals are still needed for that event.
[ ] If an owned element loses its last remaining owner, should I automatically approve all tentative commitments? This might cause problems if, for instance, the person responsible for the calendar is changing and whoever does it deletes the old person before setting up the new one.
[ ] In an ideal world, one should also be able to have groups of resources to request - meeting room, mini-bus.


What have I forgotten?  Doubtless I will find out.

Currently there are 350 concerns in the system, of which 112 are owning concerns.  Most of these probably need to go.  What happens if I write some code to find any concern which is concerned with a member of staff and remove the owns flag?  Do I rely on it for any of the current behaviour?  Does it control the can_delete? flag?  Yes, it does.  Currently the logic is that you can't delete it if you own it or control it.  I need to add a further constraint and say you can't delete the concern if you are it.

Also need to change the logic for creating a new user so they no longer own themselves.

After deleting ownerships of staff, I'm down to just 29 ownerships.  Still seems a lot though.  4 pupils too and I'm down to 25.  Of those the only one which I think is wrong is that Nick Lloyd currently owns the calendar.  I can deal with that separately though.

Now If I log in, I have the option to delete my own concern with myself, which is wrong.  Fix that.  Done.

15 elements now seem to have owners.  Good.

I need to set up some callbacks on Concerns to cause them to update Elements with their ownership status, but I need to be slightly careful to avoid a deadly embrace.  It seems obvious to hook:

* after_save
* after_destroy

and provided they are all direct calls it should be fine.  However, if the concern is being destroyed because the element itself is being destroyed, I need to make sure we don't end up in a loop.  How does one do that?

Some suggestions here:

https://github.com/rails/rails/issues/13609

Let's try it.  Seems to work, including the bit where I delete the entity underlying the element.

Interesting - I seem to have managed to create an event which has a commitment to "Calendar" and yet it doesn't appear when I ask to see the Calendar.  Why?  The commitment was initially tentative, but isn't now.  Ah - I think it's because my event isn't complete.  Why isn't it complete?  I deleted its rejected commitment.

Ah - clearly a code problem, because none of my calendar events was appearing.  Setting the event to complete made them all appear.  Two issues then.

[*] Why didn't the event get set to being complete when I deleted its rejected commitment?
[*] Why did it prevent all the other calendar events from appearing?

Is the latter problem because the concern has no colour?  We seem to have tried to wash out the colour for a calendar event, but somehow we weren't passed a colour.

I think my code to wash out a known colour is broken, and it may be that it has never been executed before.  Now, what is wrong with it?  It seems I wrote nonsense, guided by a blog.  Now fixed it.

I've just tested deleting a rejected commitment and the event did indeed become complete.  I suspect I may have done the deletion before the relevant code was in place.

Now - constraining editing.  Currently I use just a single flag - editable - on my events as they are downloaded to the browser.  If that is set then they can be edited, and if it isn't then they can't.

I need to split that in two - the situation will arise when the user can edit, but can't change the timing.  No dragging and no editing it in the dialogue.  Perhaps a second flag saying "time_fixed"?

Odd - my admin user seems to be able to override tentativeness?  How has that happened?  Is it purely because I am an admin user?  Try it the other way around.  No, my ordinary user can now ignore things too.  How has that happened? I am setting the commitment field to true, then something is changing it back to false as it gets saved to the d/b.  Weird.  Probably one of my callbacks.  No - it's because I'd tried to hook into the value assignment in my model.  Think I've fixed it?

Why does setting a commitment to be no longer tentative not automatically make it constraining?  Because I was trying to access instance variables directly.  Stop it.

Now need to work out how to send an error status back if the user requests a drag and it isn't allowed.  Really want the visual of the drag to be reverted.

What's the difference between a json file and a js file?




