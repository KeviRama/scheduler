Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-02-15T08:06:55+00:00

====== Wednesday 15 Feb 2017 ======

One aspect of Backbone I find really odd.  By default, it doesn't pack requests for sending to Rails correctly.  It's particularly odd because it apparently sprang originally from a Rails project.

Rails expects parameters to be nested in a JSON request.  If you're creating a wurble object, then it expects:

'':wurble => {:param1 => 1, :param2 => 2}''

whereas by default Backbone sends them all at the outermost level.  You can override toJSON on your model, but that then screws it up for other purposes.  Various add-ons have been written to circumvent the problem, and even Rails itself now has a bit of a frig in it (it packs the parameters for you on receipt) but it's all very messy.  I wonder how it got that way?

For now, I am leaving Backbone alone and letting the Rails frig correct the situation.  This may not be the best long term choice, but it's how I'm doing it for now.

My wonderful new structured code is getting horribly complicated in the exams cycle module.  The problem is deciding which bit of the code should take responsibility for each aspect of what's going on.

I have the following models, collections and views.

==== Models ====

ProtoEvent		Represents one ProtoEvent
ExamCycle		Represents one whole cycle

==== Collections ====

ProtoEvents		The collection of existing ProtoEvents.

==== Views ====

ProtoEventView	The view of one ProtoEvent (possibly the new-entry one)
ProtoEventsView	The view of the collection of ProtoEvents.
ExamCycleView	The view for the whole cycle.

That last view is responsible for basically the whole of the display.  Its element is the whole table.  Its own element is an ExamCycle, and then it delegates to a ProtoEventsView for the collection of existing events, and to a single ProtoEventView for the entry of a new ProtoEvent.

The problem arises because it's the single ProtoEventView which handles events on the to-be-created ProtoEvent, including someone clicking on Add.  It then needs to get the ProtoEventsView to add one to its collection, but any errors or success notifications need to be passed back to the ProtoEventView for processing.  Errors lead to error messages, success leads to the fields being reset.  The ProtoEventView thus needs to pass the request to its parent (the ExamCycleView) which in turn delegates it to the ProtoEventsView.  The results need to be passed back in the same way.

=== Request ===
Single View => ExamCycleView => Collection View

=== Results ===
Collection View => ExamCycleView => Single View
