Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-04-06T07:35:32+01:00

====== Thursday 06 Apr 2017 ======

I got the logic for checking for invigilation clashes sorted yesterday and it works both for display on screen and for sending e-mails.  Today I want to tidy up exactly how it is invoked.  Possibly merge two menu options and certainly pin down exactly what each of the options means.

Think about the UX and translate that into options.  What does one want to be able to do?

* Send a notification e-mail to staff, possibly limiting it to certain event dates and a modification date.
* Get a list of clashes on screen
* Send a list of clashes by e-mail
* From a cron job, send a weekly notification
* From a cron job, send a daily notification
* From a cron job, notify of clashes

As far as the model is concerned, I'm inclined to split the processing in two.  Currently there's a single execute() method which does all the thinking and then the sending.  I'm inclined to remove all the sending from it, so that all it does is prepare the data structures.  It's then up to calling code to ask it to send e-mails, or to extract data for display.  If I do that, then I don't think it needs the which_flag parameter at all.

Could I have a single option - Exams => Reports, and then a form to fill in to specify what you want doing.  I've tried that, and whilst it is appealing in the sense of reducing the number of menu options, I think it would confuse Ian and it definitely requires more work if you just want a clash check.  I think we retain two options - the first for sending e-mails and the second for getting a quick on-screen report.  They will share the same code, but appear a bit different to the end user.

In that case, why do we need the "notify staff" check box?  Because I might just want to send a clash e-mail.  Probably want to rename things a bit.

Add a message to the auto-generated e-mails saying that they can be turned off by editing your user preferences in Scheduler.
