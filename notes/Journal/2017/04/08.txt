Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-04-08T10:41:15+01:00

====== Saturday 08 Apr 2017 ======

Let's document the existing use of Backbone for the exam cycles page.  What do we have?

==== Models ====
* ProtoEvent
* ExamCycle

=== Collections ===
* ProtoEvents

=== Views ===
* ProtoEventView
* ProtoEventsView
* ExamCycleView
* SplitView

On initialisation, we retrieve the exam cycle id from the page which we've been given and then issue requests for the exam cycle's data and for the proto events' data.

Arguably the structure is currently wrong, because the ExamCycleView manages the ProtoEventView for new entries, and then has to ask the collection to create one.  If the Collection itself managed that extra item it would be able to do all the work.

Yes - the collection view needs to take over responsibility for the entire table.  This is because it re-renders each time a member is added.  Currently it renders just the tbody, but if we have one tbody for each entry then it will have to do the whole table.

Give it a go.

Arguably, at initialisation, I should request the ExamCycle record, and when that comes back we display that part and initialise the fetching of the ProtoEvents collection.  The collection can be created before then, but it doesn't need to be populated until slightly later.

We have a load of nested views:

1. ExamCycleView
2. ProtoEventsView
3. ProtoEventView

The initialisation code creates the ExamCycleView, which creates the ProtoEventsView, which creates one ProtoEventView.  The ExamCycleView then fetches its model data (for the one and only time).  On receiving it, it renders itself (and all its children) and then tells the ProtoEventsView to populate itself.

Do I actually need the ExamCycleView?  Does it have any work to do?  Yes, I need to fetch data for an ExamCycle model, but I don't then need to display it other than in the form for filling stuff in.:
