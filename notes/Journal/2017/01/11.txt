Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-01-11T09:08:02+00:00

====== Wednesday 11 Jan 2017 ======

Just realised that I am writing these notes in my main copy of the application, but doing my work in the scheduler1 directory.  It doesn't actually hurt, as long as I know that that's what I'm doing.  Git will happily merge the two for me as and when needed.

Thinking about it last night I realised that my main scheduler page is my big candidate for building as a single app page.  The other full screen pages which I use are independent and should be less affected - just need re-writing to use Bootstrap instead of Foundation.

The main Scheduler page should be sent down mostly without content.  The header bar - which is shared between all pages - should be generated as it current is on the server, but then the rest of the page should be generated by JavaScript code.  Most of this happens already, but the big difference will be the left margin column.  Currently that is sent down at page load and then updated via Javascript.  In the new version, it will be entirely maintained through Javascript; it won't be included in the initial page load.

I believe there will be no ''yield()'' in the scheduler page layout.

Note also that the existing _header and _footer files are slightly mis-named.  They're really top and tail files for the whole page, and in particular the _footer one does not produce a _footer.  The _header one does add the header bar, but it does more besides.  It might make sense to split them up into _top, _header, _tail.

Done that.  Just had quite an interesting one.  If you include fullcalendar-print.css it messes up the normal display.  It must think it is a printing display, but I'm not sure why.  Leave it out for now.

Hit something just a tiny bit odd in the fullcalendar display.  When my events are first shown, the all-day event on the Monday is just a tiny bit too far to the left.  At the first type of re-sizing event, it gets correctly aligned.

I've done a little bit of investigation and it seems to be down to a cell further left, defined like this:

<td class="fc-axis" style="width: 43px;"></td>

It's that explicit width which seems somehow to have been calculated too small.  Manually editing it up corrects the positioning, or just re-sizing the window slightly causes it to change and then all is well.  Making the window a tiny bit smaller causes that to get bigger.  Odd.  I think I can ignore it for now.

Another question I need to answer - should I write my code in Javascript or Coffeescript.  Rails makes it easy to use Coffeescript and kind of assumes you're going to do it, but my problem is that it's yet another thing which I need to learn.  All my experimentation work has been done in pure Javascript, and I'm tempted to think that perhaps that's what I should go with.  It shouldn't be too big a piece of work to convert what I have so far back into Javascript, and then I will be able to use the modularisation techniques which I have been studying.

And now I realise that I don't have those self-same tutorial files with me.  Perhaps leave till this PM.

I think I'm going to go with Javascript.  Coffeescript is terribly clever, but it can wait.
