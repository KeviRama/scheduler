Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-01-16T09:23:05+00:00

====== Monday 16 Jan 2017 ======

Major progress on Saturday, coding at RAL instead of helping the children.  I got models, collections and views working to the extent that I was getting a list of concerns appearing down the left hand column of the page.  There's a really decent explanation of the fundamentals of Backbone - much better than any of the tutorials which I've seen linked from Backbone's own web site.  I wish I'd found it before.

https://github.com/jashkenas/backbone/wiki/Backbone%2C-The-Primer

Obvious things to add next are:

[ ] Make each concern controller add its concern to the calendar display when it is created/turned on, and remove it when it is destroyed.
[ ] Get a click on an event to get the event display dialogue to appear.  This tests both event handling, and the ability to display a dialogue using Bootstrap instead of Foundation.
[ ] Get the menu to appear top right, and auto-update as requests arise.

The first thought I have is - when a concern is un-ticked currently, does that cause the set of events to be removed from FullCalendar's ken, or does it merely cause the server to return an empty set.  Check.  It certainly seems to cause a full re-fetch from the server.

The current code for handling the check boxes simply updates the server with the new state - off or on - and then causes all events to be re-fetched.  If the box is set to off, the server returns an empty set of events.  Is it better this way, or could I remove the event feed when the box is unticked.  The model should have enough information to put it back afterwards.  That way I believe I could avoid the full re-fetch each time - simply tell FC that the set has appeared/disappeared as appropriate.

Anyway - the first thing to do is to get it to appear at all.  That seems to involve a call to addEventSource on FC.

I believe it is the job of the View (kind of Controller) in Backbone to do this kind of work.  Go for just creation first, and ignore the state of the flag.

I also think that the event source should be added when the View is created.  It doesn't need re-adding each time the view is asked to re-render itself.
